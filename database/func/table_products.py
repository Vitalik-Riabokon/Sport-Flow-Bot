from typing import List, Optional, Tuple

from sqlalchemy import select, update
from sqlalchemy.exc import SQLAlchemyError
from sqlalchemy.ext.asyncio import AsyncSession

from database.engine import update_sequence
from database.models import Product


async def orm_add_product(
        session: AsyncSession, product_name: str, price: float, category: str
) -> int:
    """
    –î–æ–¥–∞—î –Ω–æ–≤–∏–π –ø—Ä–æ–¥—É–∫—Ç –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.

    –ê—Ä–≥—É–º–µ–Ω—Ç–∏:
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Å–µ—Å—ñ—è SQLAlchemy.
        product_name (str): –ù–∞–∑–≤–∞ –ø—Ä–æ–¥—É–∫—Ç—É.
        price (float): –¶—ñ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—É.
        category (str): –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –ø—Ä–æ–¥—É–∫—Ç—É.

    –ü–æ–≤–µ—Ä—Ç–∞—î:
        int: –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç—É.
    """
    try:
        await update_sequence(tabla_value='product_id', table_name='products', sequence_name='products_product_id_seq')
        new_product = Product(product_name=product_name, price=price, category=category)
        session.add(new_product)
        await session.commit()
        return new_product.product_id
    except SQLAlchemyError as e:
        await session.rollback()
        raise e


async def orm_get_all_categories(session: AsyncSession) -> List[str]:
    """
    –û—Ç—Ä–∏–º—É—î –≤—Å—ñ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø—Ä–æ–¥—É–∫—Ç—ñ–≤.

    –ê—Ä–≥—É–º–µ–Ω—Ç–∏:
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Å–µ—Å—ñ—è SQLAlchemy.

    –ü–æ–≤–µ—Ä—Ç–∞—î:
        List[str]: –°–ø–∏—Å–æ–∫ —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –ø—Ä–æ–¥—É–∫—Ç—ñ–≤.
    """
    result = await session.execute(select(Product.category).distinct())
    return [row[0] for row in result]


async def orm_update_category(
        session: AsyncSession, old_category: str, new_category: str
) -> None:
    """
    –û–Ω–æ–≤–ª—é—î –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ –∑ –æ–¥–Ω—ñ—î—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–∞ —ñ–Ω—à—É.

    –ê—Ä–≥—É–º–µ–Ω—Ç–∏:
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Å–µ—Å—ñ—è SQLAlchemy.
        old_category (str): –°—Ç–∞—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è.
        new_category (str): –ù–æ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è.
    """
    try:
        await session.execute(
            update(Product)
            .where(Product.category == old_category)
            .values(category=new_category)
        )
        await session.commit()
    except SQLAlchemyError as e:
        await session.rollback()
        raise e


async def orm_update_product(
        session: AsyncSession, product_name: str, update_name: str, update_type: str | float
) -> None:
    """
    –û–Ω–æ–≤–ª—é—î –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç—É.

    –ê—Ä–≥—É–º–µ–Ω—Ç–∏:
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Å–µ—Å—ñ—è SQLAlchemy.
        product_name (str): –ù–∞–∑–≤–∞ –ø—Ä–æ–¥—É–∫—Ç—É.
        update_name (str): –ù–∞–∑–≤–∞ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.
        update_value (str): –ù–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ.
    """
    try:
        await session.execute(
            update(Product)
            .where(Product.product_name == product_name)
            .values({update_name: update_type})
        )
        await session.commit()
    except SQLAlchemyError as e:
        await session.rollback()
        raise e


async def orm_get_product_price(
        session: AsyncSession, product_name: str
) -> Optional[float]:
    """
    –û—Ç—Ä–∏–º—É—î —Ü—ñ–Ω—É –ø—Ä–æ–¥—É–∫—Ç—É –∑–∞ –π–æ–≥–æ –Ω–∞–∑–≤–æ—é.

    –ê—Ä–≥—É–º–µ–Ω—Ç–∏:
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Å–µ—Å—ñ—è SQLAlchemy.
        product_name (str): –ù–∞–∑–≤–∞ –ø—Ä–æ–¥—É–∫—Ç—É.

    –ü–æ–≤–µ—Ä—Ç–∞—î:
        Optional[float]: –¶—ñ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—É –∞–±–æ None, —è–∫—â–æ –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.
    """
    result = await session.execute(
        select(Product.price).where(Product.product_name == product_name)
    )
    price = result.scalar_one_or_none()
    return price


async def orm_get_product_description(
        session: AsyncSession, product_name: str
) -> Optional[str]:
    """
    –û—Ç—Ä–∏–º—É—î –æ–ø–∏—Å –ø—Ä–æ–¥—É–∫—Ç—É –∑–∞ –π–æ–≥–æ –Ω–∞–∑–≤–æ—é.

    –ê—Ä–≥—É–º–µ–Ω—Ç–∏:
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Å–µ—Å—ñ—è SQLAlchemy.
        product_name (str): –ù–∞–∑–≤–∞ –ø—Ä–æ–¥—É–∫—Ç—É.

    –ü–æ–≤–µ—Ä—Ç–∞—î:
        Optional[str]: –û–ø–∏—Å –ø—Ä–æ–¥—É–∫—Ç—É –∞–±–æ None, —è–∫—â–æ –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.
    """
    result = await session.execute(
        select(Product.description).where(Product.product_name == product_name)
    )
    description = result.scalar_one_or_none()
    return description


async def orm_get_product_id_category(
        session: AsyncSession, product_name: str
) -> Optional[Product]:
    """
    –û—Ç—Ä–∏–º—É—î —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –ø—Ä–æ–¥—É–∫—Ç—É —Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∑–∞ –π–æ–≥–æ –Ω–∞–∑–≤–æ—é.

    –ê—Ä–≥—É–º–µ–Ω—Ç–∏:
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Å–µ—Å—ñ—è SQLAlchemy.
        product_name (str): –ù–∞–∑–≤–∞ –ø—Ä–æ–¥—É–∫—Ç—É.

    –ü–æ–≤–µ—Ä—Ç–∞—î:
        Optional[Tuple[int, str]]: –ö–æ—Ä—Ç–µ–∂ (—ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –ø—Ä–æ–¥—É–∫—Ç—É,—Ü—ñ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞, –∫–∞—Ç–µ–≥–æ—Ä—ñ—è) –∞–±–æ None, —è–∫—â–æ –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.
    """
    result = await session.execute(
        select(Product).where(
            Product.product_name == product_name
        )
    )
    res = result.fetchone()
    if res:
        return res[0]
    return None


async def orm_get_all_category(session: AsyncSession, bloc: bool = True) -> List[str]:
    """
    –û—Ç—Ä–∏–º—É—î –≤—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø—Ä–æ–¥—É–∫—Ç—ñ–≤, –≤–∏–∫–ª—é—á–∞—é—á–∏ –¥–µ—è–∫—ñ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.

    –ê—Ä–≥—É–º–µ–Ω—Ç–∏:
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Å–µ—Å—ñ—è SQLAlchemy.
        bloc (bool): –Ø–∫—â–æ True, –≤–∏–∫–ª—é—á–∞—î –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º "membership" —ñ "one_time_training".

    –ü–æ–≤–µ—Ä—Ç–∞—î:
        List[str]: –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –ø—Ä–æ–¥—É–∫—Ç—ñ–≤.
    """
    query = (
        select(Product.category)
        .distinct()
        .where(Product.category.notin_(["membership", "one_time_training"]))
    )
    if bloc:
        query = query.where(Product.status_product.is_(None))

    result = await session.execute(query)
    return [row[0] for row in result]


async def orm_get_product_name_by_category(
        session: AsyncSession, category: str, bloc: bool = False
) -> List[str]:
    """
    –û—Ç—Ä–∏–º—É—î –≤—Å—ñ –Ω–∞–∑–≤–∏ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é.

    –ê—Ä–≥—É–º–µ–Ω—Ç–∏:
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Å–µ—Å—ñ—è SQLAlchemy.
        category (str): –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –ø—Ä–æ–¥—É–∫—Ç—É.

    –ü–æ–≤–µ—Ä—Ç–∞—î:
        List[str]: –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ —É –∑–∞–¥–∞–Ω—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.
    """
    if bloc:
        result = await session.execute(
            select(Product.product_name).where(
                Product.category == category, Product.status_product.is_not(None)
            )
        )
        print('üö´üö´result',result)
        if result:
            return [row[0] for row in result]
        return result

    else:
        result = await session.execute(
            select(Product.product_name).where(
                Product.category == category, Product.status_product.is_(None)
            )
        )

    return [row[0] for row in result]


async def orm_get_data_by_product_id(
        session: AsyncSession, product_id: int
) -> Optional[Tuple[str, float]]:
    """
    –û—Ç—Ä–∏–º—É—î –Ω–∞–∑–≤—É –ø—Ä–æ–¥—É–∫—Ç—É —Ç–∞ —Ü—ñ–Ω—É –∑–∞ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–æ–º –ø—Ä–æ–¥—É–∫—Ç—É.

    –ê—Ä–≥—É–º–µ–Ω—Ç–∏:
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Å–µ—Å—ñ—è SQLAlchemy.
        product_id (int): –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –ø—Ä–æ–¥—É–∫—Ç—É.

    –ü–æ–≤–µ—Ä—Ç–∞—î:
        Optional[Tuple[str, float]]: –ö–æ—Ä—Ç–µ–∂ (–Ω–∞–∑–≤–∞ –ø—Ä–æ–¥—É–∫—Ç—É, —Ü—ñ–Ω–∞) –∞–±–æ None, —è–∫—â–æ –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.
    """
    result = await session.execute(
        select(Product.product_name, Product.price).where(
            Product.product_id == product_id
        )
    )
    return result.fetchone()


async def orm_status_product_column(
        session: AsyncSession, column: str, status_product: str | None, column_value: str
) -> None:
    """
    –û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–¥—É–∫—Ç—É –¥–ª—è –∑–∞–¥–∞–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ –∫–æ–ª–æ–Ω—Ü—ñ.

    –ê—Ä–≥—É–º–µ–Ω—Ç–∏:
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Å–µ—Å—ñ—è SQLAlchemy.
        column (str): –ù–∞–∑–≤–∞ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó.
        status_product (str): –°—Ç–∞—Ç—É—Å –ø—Ä–æ–¥—É–∫—Ç—É –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.
        column_value (str): –ó–Ω–∞—á–µ–Ω–Ω—è –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó.
    """
    try:
        await session.execute(
            update(Product)
            .where(getattr(Product, column) == column_value)
            .values(status_product=status_product)
        )
        await session.commit()
    except SQLAlchemyError as e:
        await session.rollback()
        raise e


async def orm_get_product_details(
        session: AsyncSession, product_name: str
) -> Optional[Tuple[str, str, float, str]]:
    """
    –û—Ç—Ä–∏–º—É—î –¥–µ—Ç–∞–ª—ñ –ø—Ä–æ–¥—É–∫—Ç—É –∑–∞ –π–æ–≥–æ –Ω–∞–∑–≤–æ—é.

    –ê—Ä–≥—É–º–µ–Ω—Ç–∏:
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Å–µ—Å—ñ—è SQLAlchemy.
        product_name (str): –ù–∞–∑–≤–∞ –ø—Ä–æ–¥—É–∫—Ç—É.

    –ü–æ–≤–µ—Ä—Ç–∞—î:
        Optional[Tuple[str, str, float, str]]: –ö–æ—Ä—Ç–µ–∂ (–æ–ø–∏—Å, —Ñ–æ—Ç–æ, —Ü—ñ–Ω–∞, –∫–∞—Ç–µ–≥–æ—Ä—ñ—è) –∞–±–æ None, —è–∫—â–æ –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.
    """
    result = await session.execute(
        select(
            Product.description, Product.photo, Product.price, Product.category
        ).where(Product.product_name == product_name)
    )
    return result.fetchone()
