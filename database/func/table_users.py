from datetime import datetime
from typing import Any, List, Optional, Tuple
from sqlalchemy.future import select
from sqlalchemy import and_
from sqlalchemy.ext.asyncio import AsyncSession

from database.engine import update_sequence
from database.models import Users


async def orm_add_user(
        session: AsyncSession,
        telegram_id: int,
        first_name: str,
        last_name: str,
        phone_number: str,
        status: str,
) -> int:
    """
    –î–æ–¥–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.

    –ê—Ä–≥—É–º–µ–Ω—Ç–∏:
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Å–µ—Å—ñ—è SQLAlchemy.
        telegram_id (int): –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Telegram.
        first_name (str): –Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
        last_name (str): –ü—Ä—ñ–∑–≤–∏—â–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
        phone_number (str): –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
        status (str): –°—Ç–∞—Ç—É—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.

    –ü–æ–≤–µ—Ä—Ç–∞—î:
        int: –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –¥–æ–¥–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.

    –†–µ–∑—É–ª—å—Ç–∞—Ç:
        –°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å —É —Ç–∞–±–ª–∏—Ü—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.
    """
    await update_sequence(tabla_value='user_id', table_name='users',
                          sequence_name="users_user_id_seq")
    time_now = datetime.now().date()
    new_user = Users(
        telegram_id=telegram_id,
        first_name=first_name,
        last_name=last_name,
        phone_number=phone_number,
        status=status,
        registration_date=time_now,
    )
    session.add(new_user)
    await session.commit()
    await session.refresh(new_user)
    return new_user.user_id


async def orm_get_user_by_name(
        session: AsyncSession, first_name: str, last_name: str
) -> Optional[Users]:
    """
    –û—Ç—Ä–∏–º—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ —ñ–º'—è–º —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ–º.

    –ê—Ä–≥—É–º–µ–Ω—Ç–∏:
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Å–µ—Å—ñ—è SQLAlchemy.
        first_name (str): –Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
        last_name (str): –ü—Ä—ñ–∑–≤–∏—â–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.

    –ü–æ–≤–µ—Ä—Ç–∞—î:
        Optional[User]: –û–±'—î–∫—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ None, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.

    –†–µ–∑—É–ª—å—Ç–∞—Ç:
        –û—Ç—Ä–∏–º—É—î –¥–∞–Ω—ñ –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–±–ª–∏—Ü—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.
    """
    result = await session.execute(
        select(Users).where(
            and_(Users.first_name == first_name, Users.last_name == last_name)
        )
    )
    return result.scalar_one_or_none()


async def orm_get_name(
        session: AsyncSession, telegram_id: int
) -> Optional[Tuple[str, str]]:
    """
    –û—Ç—Ä–∏–º—É—î —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ –π–æ–≥–æ Telegram ID.

    –ê—Ä–≥—É–º–µ–Ω—Ç–∏:
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Å–µ—Å—ñ—è SQLAlchemy.
        telegram_id (int): –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Telegram.

    –ü–æ–≤–µ—Ä—Ç–∞—î:
        Optional[Tuple[str, str]]: –ö–æ—Ä—Ç–µ–∂ –∑ —ñ–º–µ–Ω–µ–º —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ None, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.

    –†–µ–∑—É–ª—å—Ç–∞—Ç:
        –û—Ç—Ä–∏–º—É—î –¥–∞–Ω—ñ –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–±–ª–∏—Ü—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.
    """
    result = await session.execute(
        select(Users.first_name, Users.last_name).where(
            Users.telegram_id == telegram_id
        )
    )
    return result.fetchone()


async def orm_get_user_by_telegram_id(
        session: AsyncSession, telegram_id: int
) -> Optional[Users]:
    """
    –û—Ç—Ä–∏–º—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ –π–æ–≥–æ Telegram ID.

    –ê—Ä–≥—É–º–µ–Ω—Ç–∏:
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Å–µ—Å—ñ—è SQLAlchemy.
        telegram_id (int): –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Telegram.

    –ü–æ–≤–µ—Ä—Ç–∞—î:
        Optional[User]: –û–±'—î–∫—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ None, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.

    –†–µ–∑—É–ª—å—Ç–∞—Ç:
        –û—Ç—Ä–∏–º—É—î –¥–∞–Ω—ñ –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–±–ª–∏—Ü—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.
    """
    print('üëâüëâ')
    result = await session.execute(
        select(Users).where(Users.telegram_id == telegram_id)
    )
    print('üëâresult', result)
    return result.scalars().one_or_none()


async def orm_get_user_id_by_telegram_id(
        session: AsyncSession, telegram_id: int
) -> Optional[int]:
    """
    –û—Ç—Ä–∏–º—É—î —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ –π–æ–≥–æ Telegram ID.

    –ê—Ä–≥—É–º–µ–Ω—Ç–∏:
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Å–µ—Å—ñ—è SQLAlchemy.
        telegram_id (int): –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Telegram.

    –ü–æ–≤–µ—Ä—Ç–∞—î:
        Optional[int]: –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ None, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.

    –†–µ–∑—É–ª—å—Ç–∞—Ç:
        –û—Ç—Ä–∏–º—É—î –¥–∞–Ω—ñ –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–±–ª–∏—Ü—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.
    """
    result = await session.execute(
        select(Users.user_id).where(Users.telegram_id == telegram_id)
    )
    user_id = result.scalar_one_or_none()
    return user_id


async def orm_get_trainer_full_name(
        session: AsyncSession, user_id: int
) -> Optional[Users]:
    """
    –û—Ç—Ä–∏–º—É—î –ø–æ–≤–Ω–µ —ñ–º'—è —Ç—Ä–µ–Ω–µ—Ä–∞ –∑–∞ –π–æ–≥–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–æ–º.

    –ê—Ä–≥—É–º–µ–Ω—Ç–∏:
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Å–µ—Å—ñ—è SQLAlchemy.
        user_id (int): –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.

    –ü–æ–≤–µ—Ä—Ç–∞—î:
        Optional[Tuple[Users]]: –ö–æ—Ä—Ç–µ–∂ –∑ Telegram ID, —ñ–º'—è–º —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ None, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.

    –†–µ–∑—É–ª—å—Ç–∞—Ç:
        –û—Ç—Ä–∏–º—É—î –¥–∞–Ω—ñ –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–±–ª–∏—Ü—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.
    """
    result = await session.execute(
        select(Users).where(
            Users.user_id == user_id))
    res = result.fetchone()
    if res:
        return res[0]
    return None


async def orm_get_telegram_id(session: AsyncSession) -> List[int]:
    """
    –û—Ç—Ä–∏–º—É—î –≤—Å—ñ Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.

    –ê—Ä–≥—É–º–µ–Ω—Ç–∏:
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Å–µ—Å—ñ—è SQLAlchemy.

    –ü–æ–≤–µ—Ä—Ç–∞—î:
        List[int]: –°–ø–∏—Å–æ–∫ –∑ —É—Å—ñ–º–∞ Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.

    –†–µ–∑—É–ª—å—Ç–∞—Ç:
        –û—Ç—Ä–∏–º—É—î –¥–∞–Ω—ñ –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ —Ç–∞–±–ª–∏—Ü—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.
    """
    result = await session.execute(select(Users.telegram_id))
    return [row[0] for row in result.fetchall()]


async def orm_get_client_telegram_id(session: AsyncSession) -> List[int]:
    """
    –û—Ç—Ä–∏–º—É—î –≤—Å—ñ Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º 'client'.

    –ê—Ä–≥—É–º–µ–Ω—Ç–∏:
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Å–µ—Å—ñ—è SQLAlchemy.

    –ü–æ–≤–µ—Ä—Ç–∞—î:
        List[int]: –°–ø–∏—Å–æ–∫ –∑ —É—Å—ñ–º–∞ Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º 'client'.

    –†–µ–∑—É–ª—å—Ç–∞—Ç:
        –û—Ç—Ä–∏–º—É—î –¥–∞–Ω—ñ –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ —Ç–∞–±–ª–∏—Ü—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.
    """
    result = await session.execute(
        select(Users.telegram_id).where(Users.status == "client")
    )
    return [row[0] for row in result.fetchall()]


async def orm_update_telegram_id(
        session: AsyncSession, new_telegram_id: int, user_id: int
) -> None:
    """
    –û–Ω–æ–≤–ª—é—î Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ –π–æ–≥–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–æ–º.

    –ê—Ä–≥—É–º–µ–Ω—Ç–∏:
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Å–µ—Å—ñ—è SQLAlchemy.
        new_telegram_id (int): –ù–æ–≤–∏–π Telegram ID.
        user_id (int): –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.

    –ü–æ–≤–µ—Ä—Ç–∞—î:
        None

    –†–µ–∑—É–ª—å—Ç–∞—Ç:
        –û–Ω–æ–≤–ª—é—î –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É —Ç–∞–±–ª–∏—Ü—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.
    """
    result = await session.execute(select(Users).where(Users.user_id == user_id))
    user = result.scalar_one_or_none()
    if user:
        user.telegram_id = new_telegram_id
        await session.commit()
