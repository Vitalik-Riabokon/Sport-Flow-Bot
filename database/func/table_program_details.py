from typing import List, Tuple

import pandas as pd
from sqlalchemy import select, update, delete
from sqlalchemy.exc import SQLAlchemyError
from sqlalchemy.ext.asyncio import AsyncSession

from database.engine import update_sequence
from database.models import ProgramDetail


async def orm_add_program_details(
        session: AsyncSession, program_id: int, read_excel_file: pd.DataFrame
) -> None:
    """
    –î–æ–¥–∞—î –¥–µ—Ç–∞–ª—ñ –ø—Ä–æ–≥—Ä–∞–º–∏ –∑ —Ñ–∞–π–ª—É Excel –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.

    –ê—Ä–≥—É–º–µ–Ω—Ç–∏:
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Å–µ—Å—ñ—è SQLAlchemy.
        program_id (int): –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–∏.
        read_excel_file (pd.DataFrame): –î–∞–Ω—ñ –∑ —Ñ–∞–π–ª—É Excel.
    """
    try:
        await update_sequence(tabla_value='program_details_id', table_name='program_details',
                              sequence_name='program_details_program_details_id_seq')
        print('üö´read_excel_file.iterrows()', read_excel_file.iterrows())
        for index, row in read_excel_file.iterrows():
            new_detail = ProgramDetail(
                program_id=program_id,
                training_number=row["–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞‚Ññ"],
                approaches_number=str(row["–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—ñ–¥—Ö–æ–¥—ñ–≤"]),
                repetitions_number=str(row["–ü–æ–≤—Ç–æ—Ä–∏"]),
                weight=row["169,9"],
                program_status=None
            )
            session.add(new_detail)
        await session.commit()
    except SQLAlchemyError as e:
        await session.rollback()
        print(e)
        raise e


async def orm_check_program_details(
        session: AsyncSession, program_id: int
) -> List[int]:
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–≥—Ä–∞–º–∏ –¥–ª—è –¥–∞–Ω–æ–≥–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–∏.

    –ê—Ä–≥—É–º–µ–Ω—Ç–∏:
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Å–µ—Å—ñ—è SQLAlchemy.
        program_id (int): –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–∏.

    –ü–æ–≤–µ—Ä—Ç–∞—î:
        List[int]: –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π (—ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä—ñ–≤ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–≥—Ä–∞–º–∏).
    """
    result = await session.execute(
        select(ProgramDetail.program_details_id).where(
            ProgramDetail.program_id == program_id
        )
    )
    return [row[0] for row in result]


async def orm_get_program_details_training_number(
        session: AsyncSession, program_id: int
) -> List[int]:
    """
    –û—Ç—Ä–∏–º—É—î —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –Ω–æ–º–µ—Ä–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –¥–ª—è –¥–∞–Ω–æ–≥–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–∏.

    –ê—Ä–≥—É–º–µ–Ω—Ç–∏:
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Å–µ—Å—ñ—è SQLAlchemy.
        program_id (int): –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–∏.

    –ü–æ–≤–µ—Ä—Ç–∞—î:
        List[int]: –°–ø–∏—Å–æ–∫ —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å.
    """
    result = await session.execute(
        select(ProgramDetail.training_number)
        .distinct()
        .where(ProgramDetail.program_id == program_id)
        .order_by(ProgramDetail.training_number.asc())
    )
    return [row[0] for row in result]


async def orm_get_program_details_data(
        session: AsyncSession, program_id: int, training_number: int
) -> List[Tuple[int, int, float]]:
    """
    –û—Ç—Ä–∏–º—É—î –¥–∞–Ω—ñ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–≥—Ä–∞–º–∏ –¥–ª—è –∑–∞–¥–∞–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —Ç–∞ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–∏.

    –ê—Ä–≥—É–º–µ–Ω—Ç–∏:
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Å–µ—Å—ñ—è SQLAlchemy.
        program_id (int): –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–∏.
        training_number (int): –ù–æ–º–µ—Ä —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è.

    –ü–æ–≤–µ—Ä—Ç–∞—î:
        List[Tuple[int, int, float]]: –°–ø–∏—Å–æ–∫ –¥–∞–Ω–∏—Ö (–∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—ñ–¥—Ö–æ–¥—ñ–≤, –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä—ñ–≤, –≤–∞–≥–∞).
    """
    result = await session.execute(
        select(
            ProgramDetail.approaches_number,
            ProgramDetail.repetitions_number,
            ProgramDetail.weight,
        )
        .where(ProgramDetail.training_number == training_number)
        .where(ProgramDetail.program_id == program_id)
    )
    return result.fetchall()


async def orm_check_completed_days(
        session: AsyncSession, program_id: int
) -> List[Tuple[int, str]]:
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î –¥–Ω—ñ, –≤ —è–∫—ñ –±—É–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞ –¥–ª—è –¥–∞–Ω–æ–≥–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–∏.

    –ê—Ä–≥—É–º–µ–Ω—Ç–∏:
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Å–µ—Å—ñ—è SQLAlchemy.
        program_id (int): –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–∏.

    –ü–æ–≤–µ—Ä—Ç–∞—î:
        List[Tuple[int, str]]: –°–ø–∏—Å–æ–∫ –¥–∞–Ω–∏—Ö (–Ω–æ–º–µ—Ä —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è, —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≥—Ä–∞–º–∏).
    """
    result = await session.execute(
        select(ProgramDetail.training_number, ProgramDetail.program_status)
        .where(ProgramDetail.program_id == program_id)
        .where(ProgramDetail.program_status.isnot(None))
        .distinct()
    )
    return result.fetchall()


async def orm_update_status_program_details(
        session: AsyncSession, program_id: int, training_number: int, program_status: str
) -> None:
    """
    –û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≥—Ä–∞–º–∏ –¥–ª—è –¥–∞–Ω–æ–≥–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–∏ —Ç–∞ –Ω–æ–º–µ—Ä–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è.

    –ê—Ä–≥—É–º–µ–Ω—Ç–∏:
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Å–µ—Å—ñ—è SQLAlchemy.
        program_id (int): –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–∏.
        training_number (int): –ù–æ–º–µ—Ä —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è.
        program_status (str): –ù–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≥—Ä–∞–º–∏.
    """
    try:
        await session.execute(
            update(ProgramDetail)
            .where(ProgramDetail.program_id == program_id)
            .where(ProgramDetail.training_number == training_number)
            .values(program_status=program_status)
        )
        await session.commit()
    except SQLAlchemyError as e:
        await session.rollback()
        raise e


async def orm_del_program_details(session: AsyncSession, program_id: int) -> None:
    """
    –í–∏–¥–∞–ª—è—î –≤—Å—ñ –¥–µ—Ç–∞–ª—ñ –ø—Ä–æ–≥—Ä–∞–º–∏ –∑ —Ç–∞–±–ª–∏—Ü—ñ `ProgramDetail`, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –∑–∞–¥–∞–Ω–æ–º—É `program_id`.

    –ê—Ä–≥—É–º–µ–Ω—Ç–∏:
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Å–µ—Å—ñ—è SQLAlchemy –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö.
        program_id (int): –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–∏, –¥–µ—Ç–∞–ª—ñ —è–∫–æ—ó –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏.

    –ü–æ–≤–µ—Ä—Ç–∞—î:
        None: –§—É–Ω–∫—Ü—ñ—è –Ω–µ –ø–æ–≤–µ—Ä—Ç–∞—î –∂–æ–¥–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è.
    """

    # –í–∏–¥–∞–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–ø–∏—Å—ñ–≤ —É —Ç–∞–±–ª–∏—Ü—ñ `ProgramDetail`, –¥–µ `program_id` –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞–¥–∞–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–Ω—é
    await session.execute(delete(ProgramDetail).where(ProgramDetail.program_id == program_id))

    # –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    await session.commit()
